# Created By: Daniel Myerscough, Kaho Wentzel, Ryan Abernethy and Jasmine Kaur
# Created On: 09-22-2023
#    Purpose: IFT 402 Captstone Project
#             This program is designed to log temperature data from the Raspberry Pi  
#             and write it to a MySQL database.
#             Program will also send out an email alert if the temperature is out of range.
#             This program will be run on a Raspberry Pi 4+ with a SenseHat.
#             This device will be on the client side, meaning the database information will be known. 
#
#  Functions: connect_db() - Connects to the database.
#             get_devices() - Get all the devices associated with the client, will also want to grab the min and max temp for each device.
#             get_temp() - Gets the temperature from the sensor.
#             check_temp() - Checks the temperature against the range.
#             write_temp() - Writes the temperature to the database.
#             send_email() - Sends an email alert if the temperature is out of range.
#
#  Dependencies: mysql.connector, sense_hat, RTIMU?
#
# Imports and global variables:
import logging
import datetime
import time
import random # For testing
import sys
import os
from inspect import currentframe
import mysql.connector as mysql
logging.basicConfig(filename='temperature_logger.log', level=logging.INFO)
global test_mode
global database
test_mode = True
database = "core"

try: 
    from sense_hat import SenseHat
except Exception as e:
    t = datetime.datetime.now()
    l = currentframe().f_lineno
    m = str(t) + " | Error, line " + str(l)
    logging.error(m + " | Unable to import modules.")
    logging.info(type(e))
    logging.info(e)

# Functions
def db_connect():
    try:
        dvc = mysql.connect(
            host = "", # Host will be identical for each instance of this script.
            user="", # Username and password would be hard-coded in?
            password="") # Database is populated as a global variable on lie 32, this will be the client specific database.
    except Exception as e:
        t = datetime.datetime.now()
        l = currentframe().f_lineno
        m = str(t) + " | Error, line " + str(l)
        logging.error(m + " | Unable to connect to the database.")
        logging.info(type(e))
        logging.info(e)
        sys.exit()
    return dvc

def get_devices(db):
    sql = "SELECT desk FROM " + database + ".users WHERE deleted_at IS NULL AND desk IS NOT NULL LIMIT 25;"
    result = execute_query(db, sql)
    devices = []
    for i in result: 
        j = str(i).strip("'()',")
        devices.append(j)
    return devices

def get_temp():
    temp = random.randint(0, 100)
    return temp

def write_temp(temp, device, db):
    t = datetime.datetime.now()
    sql = "INSERT INTO " + database + ".log (device, temperature, created_at) VALUES ('" + device + "', '" + str(temp) + "', '" + str(t) + "');"
    # execute_query(db, sql)
    logging.info("Record Insered into " + database + ".log")
    logging.info(device + " | " + str(temp) + " | " + str(t))  
    return

def check_temp(temp):
    d = bool(random.getrandbits(1))
    logging.info("Temperature is in range: " + str(d))
    # for production: Devices will be passed in, or list of min / max temperatures will be passed in to compare against.
    return d

def send_email():
    logging.info("Sending email. Temperature out of range")
    return

def execute_query(db, sql):
    try:
        mycursor = db.cursor()
        mycursor.execute(sql)
        myresult = mycursor.fetchall()
    except: 
        t = datetime.datetime.now()
        l = currentframe().f_lineno
        m = str(t) + " | Error, line " + str(l)
        logging.error(m + " | Unable to query database.")
        logging.info("Statement: " + str(sql))
        logging.info(type(e))
        logging.info(e)
        db.close()
        sys.exit()
    return myresult

# Main control loop
while True:
    dev_db = db_connect()
    devices = get_devices(dev_db)
    for d in devices:
        temp = get_temp()
        write_temp(temp, d, dev_db)
        c = check_temp(temp)
        if c == False:
            send_email()
    logging.info("Sleeping for 5 seconds.")
    time.sleep(5)
    logging.info("Waking up.")
    logging.info("Program complete.")
    break

dev_db.close()
